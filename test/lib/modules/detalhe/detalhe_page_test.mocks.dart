// Mocks generated by Mockito 5.4.4 from annotations
// in todoocb/test/lib/modules/detalhe/detalhe_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todoocb/core/models/todo_model.dart' as _i3;
import 'package:todoocb/core/stores/todo_store.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObservableList_0<T> extends _i1.SmartFake
    implements _i2.ObservableList<T> {
  _FakeObservableList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodo_2 extends _i1.SmartFake implements _i3.Todo {
  _FakeTodo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoStore extends _i1.Mock implements _i4.TodoStore {
  @override
  _i2.ObservableList<_i3.Todo> get todos => (super.noSuchMethod(
        Invocation.getter(#todos),
        returnValue: _FakeObservableList_0<_i3.Todo>(
          this,
          Invocation.getter(#todos),
        ),
        returnValueForMissingStub: _FakeObservableList_0<_i3.Todo>(
          this,
          Invocation.getter(#todos),
        ),
      ) as _i2.ObservableList<_i3.Todo>);

  @override
  set todos(_i2.ObservableList<_i3.Todo>? value) => super.noSuchMethod(
        Invocation.setter(
          #todos,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);

  @override
  _i5.Future<void> add(String? titulo) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [titulo],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i3.Todo getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _FakeTodo_2(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        ),
        returnValueForMissingStub: _FakeTodo_2(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        ),
      ) as _i3.Todo);

  @override
  _i5.Future<void> fetchTodos() => (super.noSuchMethod(
        Invocation.method(
          #fetchTodos,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
